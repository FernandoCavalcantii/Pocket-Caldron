{"ast":null,"code":"const getIngredientsAndMeasures = recipe => {\n  let ingredients = [];\n  let measures = [];\n  let results = [];\n  recipe.forEach(teste => {\n    if (teste[0].includes('strIngredient')) {\n      ingredients = [...ingredients, teste];\n    }\n\n    if (teste[0].includes('strMeasure')) {\n      measures = [...measures, teste];\n    }\n  });\n  ingredients.forEach((teste, index) => {\n    results = [...results, {\n      ingredient: ingredients[index][1],\n      measure: measures[index][1]\n    }];\n  });\n  return results.filter(value => value.ingredient !== '' && value.ingredient !== null);\n};\n\nexport default getIngredientsAndMeasures;\nexport const isRecipeCompleted = id => {\n  const completedRecipes = JSON.parse(localStorage.getItem('doneRecipes'));\n\n  if (completedRecipes) {\n    return completedRecipes.some(recipe => recipe === id);\n  }\n\n  return false;\n};\nexport const isInProgressRecipe = (id, type) => {\n  const inProgressRecipe = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n  if (inProgressRecipe && inProgressRecipe[type][id]) {\n    return true;\n  }\n\n  return false;\n};\nexport const isRecipeFavorited = id => {\n  const recipe = JSON.parse(localStorage.getItem('favoriteRecipes'));\n\n  if (recipe) {\n    return recipe.some(acc => acc.id === id);\n  }\n\n  return false;\n};\nexport const toggleFavoriteRecipe = (isFavorited, _ref) => {\n  let {\n    id,\n    type,\n    nationality,\n    category,\n    alcoholicOrNot,\n    name,\n    image\n  } = _ref;\n  const favoriteds = JSON.parse(localStorage.getItem('favoriteRecipes'));\n\n  if (!favoriteds) {\n    const newFavoriteds = [{\n      id,\n      type,\n      nationality,\n      category,\n      alcoholicOrNot,\n      name,\n      image\n    }];\n    localStorage.setItem('favoriteRecipes', JSON.stringify(newFavoriteds));\n    return false;\n  }\n\n  if (isFavorited) {\n    const newFavoriteds = favoriteds.filter(acc => acc.id !== id);\n    localStorage.setItem('favoriteRecipes', JSON.stringify(newFavoriteds));\n  } else {\n    const newFavoriteds = [...favoriteds, {\n      id,\n      type,\n      nationality,\n      category,\n      alcoholicOrNot,\n      name,\n      image\n    }];\n    localStorage.setItem('favoriteRecipes', JSON.stringify(newFavoriteds));\n  }\n};","map":{"version":3,"sources":["/home/fernando/Pasta1/Projetos/sd-017-project-recipes-app/src/helpers/index.js"],"names":["getIngredientsAndMeasures","recipe","ingredients","measures","results","forEach","teste","includes","index","ingredient","measure","filter","value","isRecipeCompleted","id","completedRecipes","JSON","parse","localStorage","getItem","some","isInProgressRecipe","type","inProgressRecipe","isRecipeFavorited","acc","toggleFavoriteRecipe","isFavorited","nationality","category","alcoholicOrNot","name","image","favoriteds","newFavoriteds","setItem","stringify"],"mappings":"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","sourcesContent":["const getIngredientsAndMeasures = (recipe) => {\n  let ingredients = [];\n  let measures = [];\n  let results = [];\n\n  recipe.forEach((teste) => {\n    if (teste[0].includes('strIngredient')) {\n      ingredients = [...ingredients, teste];\n    }\n    if (teste[0].includes('strMeasure')) {\n      measures = [...measures, teste];\n    }\n  });\n\n  ingredients.forEach((teste, index) => {\n    results = [\n      ...results, {\n        ingredient: ingredients[index][1],\n        measure: measures[index][1],\n      }];\n  });\n\n  return results.filter((value) => value.ingredient !== '' && value.ingredient !== null);\n};\n\nexport default getIngredientsAndMeasures;\n\nexport const isRecipeCompleted = (id) => {\n  const completedRecipes = JSON.parse(localStorage.getItem('doneRecipes'));\n  if (completedRecipes) {\n    return completedRecipes.some((recipe) => recipe === id);\n  }\n  return false;\n};\n\nexport const isInProgressRecipe = (id, type) => {\n  const inProgressRecipe = JSON.parse(localStorage.getItem('inProgressRecipes'));\n  if (inProgressRecipe && inProgressRecipe[type][id]) {\n    return true;\n  }\n  return false;\n};\n\nexport const isRecipeFavorited = (id) => {\n  const recipe = JSON.parse(localStorage.getItem('favoriteRecipes'));\n  if (recipe) {\n    return recipe.some((acc) => acc.id === id);\n  }\n  return false;\n};\n\nexport const toggleFavoriteRecipe = (isFavorited, {\n  id, type, nationality, category, alcoholicOrNot, name, image }) => {\n  const favoriteds = JSON.parse(localStorage.getItem('favoriteRecipes'));\n  if (!favoriteds) {\n    const newFavoriteds = [{\n      id,\n      type,\n      nationality,\n      category,\n      alcoholicOrNot,\n      name,\n      image,\n    }];\n    localStorage.setItem('favoriteRecipes', JSON.stringify(newFavoriteds));\n    return false;\n  }\n  if (isFavorited) {\n    const newFavoriteds = favoriteds.filter((acc) => acc.id !== id);\n    localStorage.setItem('favoriteRecipes', JSON.stringify(newFavoriteds));\n  } else {\n    const newFavoriteds = [...favoriteds, {\n      id,\n      type,\n      nationality,\n      category,\n      alcoholicOrNot,\n      name,\n      image,\n    }];\n    localStorage.setItem('favoriteRecipes', JSON.stringify(newFavoriteds));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}